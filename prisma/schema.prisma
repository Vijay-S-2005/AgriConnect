datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum usertype {
  user 
  admin 
  farmer
}

model User {
  userId       Int       @id @default(autoincrement())  // Changed to userId
  firstName    String    @db.VarChar(255)
  lastName     String    @db.VarChar(255)
  phoneNumber  String    @unique @db.VarChar(255)
  email        String    @unique
  password     String    @db.VarChar(255)
  type         usertype
  createdAt    DateTime  @default(now())

  // Relations
  accounts     Account[]       // Relation with Account for OAuth providers
  sessions     Session[]       // Relation with Session for session management
  carts        Cart[]          // New relation with Cart
}

model OTP {
  id          Int      @id @default(autoincrement())
  phoneNumber String
  otp         String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
}

enum ProductType {
  Vegetable
  Fruit
  Grain
  Millet
}

model Product {
  productId          Int      @id @default(autoincrement())  // Changed to productId
  productName        String   @db.VarChar(255)               
  ProductDescription String?  @db.Text                      
  type               ProductType                             
  quantity           Int
  ownerName          String   @db.VarChar(255)               
  price              Int                                      
  review             Int?                                     
  imageURL           String?  @db.VarChar(255)               
  weight             Int                                      
  
  // Relations
  carts              Cart[]   // New relation with Cart
}

model Cart {
  cartId     Int     @id @default(autoincrement())  // Primary Key
  userId     Int
  productId  Int
  quantity   Int     // Quantity of the product in the cart

  // Relations
  user       User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [productId], onDelete: Cascade)

  // Unique constraint on userId and productId
  @@unique([userId, productId])
}


model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  provider           String   @db.VarChar(255)
  providerAccountId  String   @db.VarChar(255)
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?  @db.VarChar(255)
  scope              String?  @db.Text
  id_token           String?  @db.Text
  session_state      String?  @db.Text
  user               User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model VerificationToken {
  identifier   String   @db.VarChar(255)
  token        String   @unique
  expires      DateTime
}
