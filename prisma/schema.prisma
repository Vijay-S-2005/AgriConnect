datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum usertype {
  user 
  admin 
  farmer
}

model User {
  id           Int       @id @default(autoincrement())
  firstName    String    @db.VarChar(255)
  lastName     String    @db.VarChar(255)
  phoneNumber  String    @db.VarChar(255)
  email        String    @unique
  password     String    @db.VarChar(255)
  type         usertype
  createdAt    DateTime  @default(now())
  
  // Relations with NextAuth models
  accounts     Account[]       // Relation with Account for OAuth providers
  sessions     Session[]       // Relation with Session for session management
}

model OTP {
  id          Int      @id @default(autoincrement())
  phoneNumber String
  otp         String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
}

enum ProductType {
  Vegetable
  Fruit
  Grain
  Millet
}

model Product {
  id                 Int      @id @default(autoincrement())  // Primary Key with auto-increment
  productName        String   @db.VarChar(255)               // Same as VARCHAR(255)
  ProductDescription String?  @db.Text                      // TEXT in SQL, optional
  type               ProductType                             // Enum type defined below
  quantity           Int
  ownerName          String   @db.VarChar(255)               // Same as VARCHAR(255)
  price              Int                                      // Changed to INT
  review             Int?                                     // Optional field
  imageURL           String?  @db.VarChar(255)               // Optional and VARCHAR(255)
  weight             Int                                      // Changed to INT
}

// These models are required for NextAuth

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  provider           String   @db.VarChar(255)
  providerAccountId  String   @db.VarChar(255)
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?  @db.VarChar(255)
  scope              String?  @db.Text
  id_token           String?  @db.Text
  session_state      String?  @db.Text
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier   String   @db.VarChar(255)
  token        String   @unique
  expires      DateTime
}


model cart {
  cartId
  userId Int
  productId
  quantity
  


}